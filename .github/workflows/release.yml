name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Run release in dry-run mode'
        required: false
        type: boolean
        default: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc, etc.)
          if [[ $VERSION =~ (alpha|beta|rc|pre) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-PRERELEASE"
            exit 1
          fi

      - name: Check if tag exists (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git tag | grep -q "^v${{ steps.version.outputs.version }}$"; then
            echo "Tag v${{ steps.version.outputs.version }} already exists!"
            exit 1
          fi

  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run test:coverage
          npm run build

      - name: Verify package can be packed
        run: |
          npm pack --dry-run
          
      - name: Test installation from packed file
        run: |
          npm pack
          npm install -g *.tgz
          cc-statusline --help

  build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update package.json version
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ needs.validate.outputs.version }}"

      - name: Build
        run: npm run build

      - name: Create package
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            dist/
            *.tgz
          retention-days: 90

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: ${{ !github.event.inputs.dry_run }}
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: Update package.json version
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version

      - name: Publish to NPM
        run: |
          if [[ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]]; then
            npm publish --tag beta
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify published package
        run: |
          sleep 30  # Wait for NPM to propagate
          npm view @sponzig/cc-statusline@${{ needs.validate.outputs.version }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, publish-npm]
    if: always() && !failure() && !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "^v${{ needs.validate.outputs.version }}$" | head -n 1)
          
          if [[ -z "$PREV_TAG" ]]; then
            echo "No previous tag found, using initial commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating changelog from $PREV_TAG to v${{ needs.validate.outputs.version }}"
          
          # Generate changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          $(git log --pretty=format:"* %s (%h)" $PREV_TAG..HEAD | grep -v "^* Merge")
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...v${{ needs.validate.outputs.version }}
          EOF
          
          cat CHANGELOG.md

      - name: Create/Update Git Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ needs.validate.outputs.version }}" -m "Release v${{ needs.validate.outputs.version }}"
          git push origin "v${{ needs.validate.outputs.version }}"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          release_name: Release v${{ needs.validate.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sponzig-cc-statusline-${{ needs.validate.outputs.version }}.tgz
          asset_name: cc-statusline-${{ needs.validate.outputs.version }}.tgz
          asset_content_type: application/gzip

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always() && !failure() && !cancelled()
    steps:
      - name: Release Success Notification
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          echo "✅ Successfully released v${{ needs.validate.outputs.version }}"
          echo "📦 NPM: https://www.npmjs.com/package/@sponzig/cc-statusline"
          echo "🏷️ GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"

      - name: Dry Run Notification
        if: ${{ github.event.inputs.dry_run }}
        run: |
          echo "🧪 Dry run completed successfully for v${{ needs.validate.outputs.version }}"
          echo "All checks passed - ready for actual release!"